#!/bin/bash -x
# Which service is being initialized
initServiceYaml=$1
#Extract additional vars from config files and add as environment variable
directoryPath=$(yq -r '.sharedInput.directoryPath' config-files/user-environment/common-config.yaml)
pipelineDirectoryName=$(yq -r '.pipelineInput.directoryName' config-files/user-environment/common-config.yaml)
#Pipeline yaml file is currently hardcoded here
pipelinePath=$directoryPath$pipelineDirectoryName/testServiceResourceAndCode.yaml
export TF_VAR_pipeline_path=$pipelinePath
serviceDirectoryName=$(yq -r '.serviceInput.directoryName' config-files/user-environment/service-configs/$initServiceYaml)
# # #Apply terraform files, to create ado project, repo, and pipeline
cd user-environment/terraform-files
terraform init
terraform apply -auto-approve
if [ $? -ne 0 ]
then
    echo "Terraform apply failed."
    exit 1
fi
#Extract values from terraform output, and create env-information file that stores require variables
project=$(terraform output project_name)
project=${project//\"/}
repo=$(terraform output repo_name)
repo=${repo//\"/}
url=$(terraform output repo_url)
url=${url//\"/}
url=${url#https://}
org="${url%%.*}"
PROJECTPAT=$(terraform output project_pat)
PROJECTPAT=${PROJECTPAT//\"/}
READPAT=$(terraform output read_pat)
READPAT=${READPAT//\"/}
url="https://$PROJECTPAT@$url"
#Create go module name prefix for repo
prefix=dev.azure.com/$org/$project/_git/$repo
service_connection=$(terraform output service_connection_name)
service_connection=${service_connection//\"/}
cd ..
cat <<EOF > ../config-files/user-environment/env-information.yaml
# This file was automatically generated by our user environment creation script, using terraform output.
envInformation:
    # Since we use the following goModuleNamePrefix, the api module at this location is used when building
    # the service's docker image. In order to choose a specific version, please change the version in init.sh
    # and refer to the developer-guide.md for more information
    goModuleNamePrefix: $prefix.git
    # The following is the service connection name that is used in the pipeline files.
    # Also automatically generated by terraform output for the user environment, but manually added for other uses.
    serviceConnectionName: $service_connection
EOF
#---------------
#Add required configuration settings
git config --global url."https://$READPAT@$prefix".insteadOf "https://$prefix"
goprivate='export GOPRIVATE="dev.azure.com"'
grep -qF -- "$goprivate" ~/.bashrc || echo "$goprivate" >> ~/.bashrc
#---------------
cd ..
rm -rf user-environment/generated-output
mkdir user-environment/generated-output
#Set config files
genConfig="../config-files/generator-config.yaml"
servConfigFolder="../config-files/user-environment/service-configs"
commonConfig="../config-files/user-environment/common-config.yaml"
terraformOut="../config-files/user-environment/env-information.yaml"
#Generate pipeline files, service and shared resources
make generateAll serviceConfig=$servConfigFolder commonConfig=$commonConfig generatorConfig=$genConfig envInformation=$terraformOut
if [ $? -ne 0 ]
then
    echo "Generation failed."H
    exit 1
fi
#---------------
cd user-environment
# Redact sensitive information
jq '(.resources[] |= if .type == "azurerm_key_vault_secret" then .instances[].attributes.value = "REDACTED" else . end) |
    (.outputs[] |= if .sensitive then .value = "REDACTED" else . end) ' terraform-files/terraform.tfstate > terraform-files/terraform.tfstate.tmp
if [ $? -eq 0 ]; then
    mv terraform-files/terraform.tfstate.tmp terraform-files/terraform.tfstate
else
    echo "Error processing terraform.tfstate with jq"
    exit 1
fi
jq '(.resources[] |= if .type == "azurerm_key_vault_secret" then .instances[].attributes.value = "REDACTED" else . end) |
    (.outputs[] |= if .sensitive then .value = "REDACTED" else . end) ' terraform-files/terraform.tfstate.backup > terraform-files/terraform.tfstate.backup.tmp
if [ $? -eq 0 ]; then
    mv terraform-files/terraform.tfstate.backup.tmp terraform-files/terraform.tfstate.backup
else
    echo "Error processing terraform.tfstate.backup with jq" >&2
    exit 1
fi
cp -r terraform-files generated-output/
#Initialize git
cd generated-output
git init
git remote rm origin
git remote add origin $url
cd $serviceDirectoryName
./init.sh
if [ $? -ne 0 ]
then
    echo "Running init.sh failed."
    exit 1
fi
#---------------------------
cd ..
echo "Waiting before pushing to repository"
#TODO: Sleep is not ideal, but if we push too soon, pipeline doesn't get triggered.
sleep 30
#Push to git repo
git add .
git commit -m "Run init.sh"
git push