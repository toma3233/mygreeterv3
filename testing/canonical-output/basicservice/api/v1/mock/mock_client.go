// Code generated by MockGen. DO NOT EDIT.
// Source: dev.azure.com/service-hub-flg/service_hub/_git/service_hub.git/testing/canonical-output/basicservice/api/v1 (interfaces: BasicServiceClient)
//
// Generated by this command:
//
//	mockgen -package mock dev.azure.com/service-hub-flg/service_hub/_git/service_hub.git/testing/canonical-output/basicservice/api/v1 BasicServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "dev.azure.com/service-hub-flg/service_hub/_git/service_hub.git/testing/canonical-output/basicservice/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBasicServiceClient is a mock of BasicServiceClient interface.
type MockBasicServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBasicServiceClientMockRecorder
	isgomock struct{}
}

// MockBasicServiceClientMockRecorder is the mock recorder for MockBasicServiceClient.
type MockBasicServiceClientMockRecorder struct {
	mock *MockBasicServiceClient
}

// NewMockBasicServiceClient creates a new mock instance.
func NewMockBasicServiceClient(ctrl *gomock.Controller) *MockBasicServiceClient {
	mock := &MockBasicServiceClient{ctrl: ctrl}
	mock.recorder = &MockBasicServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicServiceClient) EXPECT() *MockBasicServiceClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockBasicServiceClient) SayHello(ctx context.Context, in *v1.HelloRequest, opts ...grpc.CallOption) (*v1.HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*v1.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockBasicServiceClientMockRecorder) SayHello(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockBasicServiceClient)(nil).SayHello), varargs...)
}
